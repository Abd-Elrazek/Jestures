plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id 'com.jfrog.artifactory' version '4.5.2'
}
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

mainClassName = 'recorder.controller.Main'


group = project_group
archivesBaseName = project_artifact
version = project.project_version

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'recorder.controller.Main'
    }
}

repositories {
	jcenter()
	mavenCentral()
}

dependencies {
    compile 'org.apache.commons:commons-math3:3.6.1'
    testCompile 'junit:junit:4.12'
    compile project(':Jestures')
}

//BINTRAY
bintray {
	user = project.hasProperty('bintrayUsername') ? project.property('bintrayUsername') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')

    
    publications = ['maven']
    pkg {
        repo = 'maven'
        name = project.project_name
        desc = project.project_description
        licenses = [project.project_license_tag]
        labels = ['Jestures', 'sensor', 'kinect', 'tracking', 'Recognition', 'Gesture']
        publicDownloadNumbers = true
        websiteUrl = "https://github.com/$project.your_github_name/$project.project_name"
        issueTrackerUrl = "https://github.com/$project.your_github_name/$project.project_name/issues"
        vcsUrl = "https://github.com/$your_github_name/${project.project_name}.git"
        githubRepo = "$your_github_name/$project.project_name"
    	githubReleaseNotesFile = 'Releasenotes.md'
        version {
            name = project.project_version
            vcsTag = project.project_version
            desc =  project.project_version
            released = new Date()
            gpg {
                sign = true
            }
        }
    }
}

// to publish SNAPSHOTs to http://oss.jfrog.org/oss-snapshot-local/ 
// and !SNAPSHOTs to http://oss.jfrog.org/oss-release-local/
artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            // The Artifactory repository key to publish to
            // when using oss.jfrog.org the credentials are from Bintray.
            if (project.version.endsWith("-SNAPSHOT")) {
              repoKey = 'oss-snapshot-local'
            } else {
              repoKey = 'oss-release-local' 
            }
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications 'maven'
            properties = [ 'bintray.repo': 'giulianini/maven', 'bintray.package': 'giulianini:giulianini', 'bintray.version': project.project_version.toString() ]
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId project_group
            artifactId project_artifact
            version project.project_version
               
            artifact sourcesJar {
	        	classifier 'sources'
	      	}
	
		  	artifact javadocJar {
	        	classifier 'javadoc'
	      	}
            
            pom {
		        packaging 'jar'
		        withXml {
		          	asNode().children().last() + {
						def builder = delegate
						
						// maven central publishing mandatories
						builder.name project.project_name
						builder.description project.project_description
						builder.url "https://github.com/$project.your_github_name/$project.project_name"
						
						builder.licenses {
						    builder.license {
						      builder.name project.project_license
						      builder.url project.project_license_url
						      builder.distribution 'repo'
						    }
						}
						
						builder.scm {
						    builder.url "scm:svn:http://github.com/$project.your_github_name/$project.project_name"
						    builder.connection "scm:svn:http://github.com/$your_github_name/${project.project_name}.git"
						    builder.developerConnection "scm:svn:ssh://github.com/$your_github_name/${project.project_name}.git"
						}
						
						builder.developers {
						    builder.developer {
						      builder.name 'Luca Giulianini'
						      builder.email 'luca.giulianini@studio.unibo.it'
						    }
						}
						
						// maven central publishing optionals
						builder.issueManagement {
						  builder.system 'github'
						  builder.url "https://github.com/$project.your_github_name/$project.project_name/issues"
						}
						
						builder.ciManagement {
						  builder.system 'Travis CI'
						  builder.url "https://travis-ci.org/$project.your_github_name/$project.project_name"
						}
		        	}		    
        		}
    		}
    	}
    }
}

publishing {
            if (!version.toString().endsWith('-SNAPSHOT'))
   				 publish.dependsOn bintrayUpload
			else if (version.toString().endsWith('-SNAPSHOT'))
    			publish.dependsOn artifactoryPublish
}

signing {
	required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

artifacts {
    archives javadocJar, sourcesJar, jar
}

task printVersion() {
	println(project.project_version)  
}




